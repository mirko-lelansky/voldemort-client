syntax = "proto3";

package voldemort;

option java_package = "voldemort.client.protocol.pb";
option java_outer_classname = "VAdminProto";
option optimize_for = SPEED;

import "voldemort-client-v3.proto";

message GetMetadataRequest {
    bytes key = 1;
}

message GetMetadataResponse {
    Versioned version = 1;
    Error error = 2;
}

message UpdateMetadataRequest {
    bytes key = 1;
    Versioned versioned = 2;
}

message UpdateStoreDefinitions {
    bytes key = 1;
    Versioned versioned = 2;
}

message UpdateMetadataPairRequest {
    bytes cluster_key = 1;
    Versioned cluster_value = 2;
    bytes store_key = 3;
    Versioned store_value = 4;
}

message UpdateMetadataPairResponse {
    Error error = 1;
}

message UpdateMetadataResponse {
    Error error = 1;
}

message FileEntry {
    string file_name = 1;
    int64 file_size_bytes = 2;
}

message PartitionEntry {
    bytes key = 1;
    Versioned versioned = 2;
}

message VoldemortFilter {
    string name = 1;
    bytes data = 2;
}

message UpdatePartitionEntriesRequest {
    string store = 1;
    PartitionEntry partition_entry = 2;
    VoldemortFilter filter = 3;
    bool overwriteIfLatestTs = 4;
}

message UpdatePartitionEntriesResponse {
    Error error = 1;
}

message UpdateSlopEntriesRequest {
    string store = 1;
    bytes key = 2;
    VectorClock version = 3;
    RequestType request_type = 4;
    bytes value = 5;
    bytes transform = 6;
}

message UpdateSlopEntriesResponse {
    Error error = 1;
}

message FetchPartitionFilesRequest {
    string store_name = 1;
    repeated int32 partition_ids = 2;
}

message FetchPartitionEntriesRequest {
    repeated int32 partition_ids = 1;
    string store = 2;
    VoldemortFilter filter = 3;
    bool fetch_values = 4;
    int64 OBSOLETE__DO_NOT_USE__skip_records = 5;
    string initial_cluster = 6;
    bool fetch_orphaned = 7;
    int64 records_per_partition = 8;
}

message FetchPartitionEntriesResponse {
    PartitionEntry partition_entry = 1;
    bytes key = 2;
    Error error = 3;
}

message DeletePartitionEntriesRequest {
    string store = 1;
    repeated int32 partition_ids = 2;
    VoldemortFilter filter = 3;
    string initial_cluster = 4;
}

message DeletePartitionEntriesResponse {
    int64 count = 1;
    Error error = 2;
}

message InitiateFetchAndUpdateRequest {
    int32 node_id = 1;
    string store = 2;
    VoldemortFilter filter = 3;
    repeated int32 partition_ids = 4;
    string initial_cluster = 5;
    bool OBSOLETE__DO_NOT_USE__optimize = 6;
}

message AsyncOperationStatusRequest {
    int32 request_id = 1;
}

message AsyncOperationStatusReponse {
    int32 request_id = 1;
    string description = 2;
    string status = 3;
    bool complete = 4;
    Error error = 5;
}

message AsyncOperationStopRequest {
    int32 request_id = 1;
}

message AsyncOperationStopResponse {
    Error error = 1;
}

message AsyncOperationListRequest {
  bool show_complete = 2;
}

message AsyncOperationListResponse {
  repeated int32 request_ids = 1;
  Error error = 2;
}

message ListScheduledJobsRequest {
}

message ListScheduledJobsResponse {
  repeated string job_ids = 1;
  Error error = 2;
}

message GetScheduledJobStatusRequest {
  string job_id = 1;
}

message GetScheduledJobStatusResponse {
  bool enabled = 1;
  Error error = 2;
}

message StopScheduledJobRequest {
  string job_id = 1;
}

message StopScheduledJobResponse {
  Error error = 1;
}

message EnableScheduledJobRequest {
  string job_id = 1;
}

message EnableScheduledJobResponse {
  Error error = 1;
}

message PartitionTuple {
  int32 replica_type = 1;
  repeated int32 partitions = 2;
}

message PerStorePartitionTuple {
  string store_name = 1;
  repeated PartitionTuple replica_to_partition = 2;
}

message RebalancePartitionInfoMap {
  int32 stealer_id = 1;
  int32 donor_id = 2;
  int32 OBSOLETE__DO_NOT_USE__attempt = 3;
  repeated PerStorePartitionTuple replica_to_add_partition = 4;
  repeated PerStorePartitionTuple replica_to_delete_partition = 5;
  string initial_cluster = 6;
}

message StoreToPartitionsIds {
  string store_name = 1;
  repeated int32 partition_ids = 2;
}

message RebalanceTaskInfoMap {
  int32 stealer_id = 1;
  int32 donor_id = 2;
  repeated StoreToPartitionsIds per_store_partition_ids = 3;
  string initial_cluster = 4;
}

message InitiateRebalanceNodeRequest {
  RebalanceTaskInfoMap rebalance_task_info = 1;
}

message InitiateRebalanceNodeOnDonorRequest {
  repeated RebalancePartitionInfoMap rebalance_partition_info = 1;
}

message TruncateEntriesRequest {
  string store = 1;
}

message TruncateEntriesResponse {
  Error error = 1;
}

message AddStoreRequest {
  string storeDefinition = 1;
}

message AddStoreResponse {
  Error error = 1;
}

message DeleteStoreRequest {
  string storeName = 1;
}

message DeleteStoreResponse {
  Error error = 1;
}

message FetchStoreRequest {
  string store_name = 1;
  string store_dir = 2;
  int64 push_version = 3;
}

message SwapStoreRequest {
  string store_name = 1;
  string store_dir = 2;
}

message SwapStoreResponse {
  Error error = 1;
  string previous_store_dir = 2;
}

message RollbackStoreRequest {
  string store_name = 1;
  int64 push_version = 2;
}

message RollbackStoreResponse {
  Error error = 1;
}

message RepairJobRequest {
  string store_name = 1;
}

message RepairJobResponse {
  Error error = 1;
}

message PruneJobRequest {
  string store_name = 1;
}

message PruneJobResponse {
  Error error = 1;
}

message SlopPurgeJobRequest {
  repeated int32 filter_node_ids = 1;
  int32 filter_zone_id = 2;
  repeated string filter_store_names = 3;
}

message SlopPurgeJobResponse {
  Error error = 1;
}


message ROStoreVersionDirMap {
 string store_name = 1;
 string store_dir = 2;
}

message GetROMaxVersionDirRequest {
  repeated string store_name = 1;
}

message GetROMaxVersionDirResponse {
  repeated ROStoreVersionDirMap ro_store_versions = 1;
  Error error = 2;
}

message GetROCurrentVersionDirRequest {
  repeated string store_name = 1;
}

message GetROCurrentVersionDirResponse {
  repeated ROStoreVersionDirMap ro_store_versions = 1;
  Error error = 2;
}

message GetROStorageFormatRequest {
  repeated string store_name = 1;
}

message GetROStorageFormatResponse {
  repeated ROStoreVersionDirMap ro_store_versions = 1;
  Error error = 2;
}

message GetROStorageFileListRequest {
  string store_name = 1;
}

message GetROStorageFileListResponse {
  repeated string file_name = 1;
  Error error = 2;
  repeated int32 data_file_size=3;
  repeated int32 index_file_size=4;
}

message GetROStorageCompressionCodecListRequest {
}

message GetROStorageCompressionCodecListResponse {
  repeated string compression_codecs = 1;
  Error error = 2;
}

message FailedFetchStoreRequest {
  string store_name = 1;
  string store_dir = 2;
}

message FailedFetchStoreResponse {
  Error error = 1;
}

message RebalanceStateChangeRequest {
  repeated RebalanceTaskInfoMap rebalance_task_list = 1;
  string cluster_string = 2;
  string stores_string = 3;
  bool swap_ro = 4;
  bool change_cluster_metadata = 5;
  bool change_rebalance_state = 6;
  bool rollback = 7;
}

message RebalanceStateChangeResponse {
  Error error = 1;
}

message DeleteStoreRebalanceStateRequest {
  string store_name = 1;
  int32 node_id = 2;
}

message DeleteStoreRebalanceStateResponse {
  Error error = 1;
}

message SetOfflineStateRequest {
  bool offline_mode = 1;
}

message SetOfflineStateResponse {
  Error error = 1;
}

message NativeBackupRequest {
  string store_name = 1;
  string backup_dir = 2;
  bool verify_files = 3;
  bool incremental = 4;
}

message ReserveMemoryRequest {
  string store_name = 1;
  int64 size_in_mb = 2;
}

message ReserveMemoryResponse {
  Error error = 1;
}

message GetHighAvailabilitySettingsRequest {
}

message GetHighAvailabilitySettingsResponse {
  bool enabled = 1;
  string cluster_id = 2;
  int32 max_node_failure = 3;
  string lock_path = 4;
  string lock_implementation = 5;
}

message DisableStoreVersionRequest {
  string store_name = 1;
  int64 push_version = 2;
  string info = 3;
}

message DisableStoreVersionResponse {
  bool disable_success = 1;
  bool disable_persistence_success = 2;
  string info = 3;
  int32 node_id = 4;
}

message HandleFetchFailureRequest {
  repeated int32 failed_nodes = 1;
  string store_name = 2;
  int64 push_version = 3;
  string info = 4;
}

message HandleFetchFailureResponse {
  bool swap_is_possible = 1;
  string info = 2;
  repeated DisableStoreVersionResponse disable_store_responses = 3;
}

message GetConfigRequest {
  repeated string config_key = 1;
}

message GetConfigResponse {
  // Key/value pairs of each requested config key
  repeated MapFieldEntry config_map = 1;
  // Requested config keys which cannot be provided, along with the reason why in the value.
  repeated MapFieldEntry invalid_config_map = 2;
}

message MapFieldEntry {
  string key = 1;
  string value = 2;
}


enum AdminRequestType {
  GET_METADATA = 0;
  UPDATE_METADATA = 1;
  UPDATE_PARTITION_ENTRIES = 2;
  FETCH_PARTITION_ENTRIES = 3;
  DELETE_PARTITION_ENTRIES = 4;
  INITIATE_FETCH_AND_UPDATE = 5;
  ASYNC_OPERATION_STATUS = 6;
  INITIATE_REBALANCE_NODE = 7;
  ASYNC_OPERATION_STOP = 8;
  ASYNC_OPERATION_LIST = 9;
  TRUNCATE_ENTRIES = 10;
  ADD_STORE = 11;
  DELETE_STORE = 12;
  FETCH_STORE = 13;
  SWAP_STORE = 14;
  ROLLBACK_STORE = 15;
  GET_RO_MAX_VERSION_DIR = 16;
  GET_RO_CURRENT_VERSION_DIR = 17;
  FETCH_PARTITION_FILES = 18;
  UPDATE_SLOP_ENTRIES = 20;
  FAILED_FETCH_STORE = 22;
  GET_RO_STORAGE_FORMAT = 23;
  REBALANCE_STATE_CHANGE = 24;
  REPAIR_JOB = 25;
  // INITIATE_REBALANCE_NODE_ON_DONOR = 26;
  DELETE_STORE_REBALANCE_STATE = 27;
  NATIVE_BACKUP = 28;
  RESERVE_MEMORY = 29;
  PRUNE_JOB = 30;
  SLOP_PURGE_JOB = 31;
  UPDATE_METADATA_PAIR = 32;
  UPDATE_STORE_DEFINITIONS = 33;
  SET_OFFLINE_STATE = 34;
  GET_RO_STORAGE_FILE_LIST = 35;
  GET_RO_COMPRESSION_CODEC_LIST = 36;
  LIST_SCHEDULED_JOBS = 37;
  GET_SCHEDULED_JOB_STATUS = 38;
  STOP_SCHEDULED_JOB = 39;
  ENABLE_SCHEDULED_JOB = 40;
  GET_HA_SETTINGS = 41;
  DISABLE_STORE_VERSION = 42;
  HANDLE_FETCH_FAILURE = 43;
  GET_CONFIG = 44;
}

message VoldemortAdminRequest {
  AdminRequestType type = 1;
  GetMetadataRequest get_metadata = 2;
  UpdateMetadataRequest update_metadata = 3;
  UpdatePartitionEntriesRequest update_partition_entries = 4;
  FetchPartitionEntriesRequest fetch_partition_entries = 5;
  DeletePartitionEntriesRequest delete_partition_entries = 6;
  InitiateFetchAndUpdateRequest initiate_fetch_and_update = 7;
  AsyncOperationStatusRequest async_operation_status = 8;
  InitiateRebalanceNodeRequest initiate_rebalance_node = 9;
  AsyncOperationStopRequest async_operation_stop = 10;
  AsyncOperationListRequest async_operation_list = 11;
  TruncateEntriesRequest truncate_entries = 12;
  AddStoreRequest add_store = 13;
  DeleteStoreRequest delete_store = 14;
  FetchStoreRequest fetch_store = 15;
  SwapStoreRequest swap_store = 16;
  RollbackStoreRequest rollback_store = 17;
  GetROMaxVersionDirRequest get_ro_max_version_dir = 18;
  GetROCurrentVersionDirRequest get_ro_current_version_dir = 19;
  FetchPartitionFilesRequest fetch_partition_files = 20;
  UpdateSlopEntriesRequest update_slop_entries = 22;
  FailedFetchStoreRequest failed_fetch_store = 24;
  GetROStorageFormatRequest get_ro_storage_format = 25;
  RebalanceStateChangeRequest rebalance_state_change = 26;
  RepairJobRequest repair_job = 27;  
  // InitiateRebalanceNodeOnDonorRequest initiate_rebalance_node_on_donor = 28;
  DeleteStoreRebalanceStateRequest delete_store_rebalance_state = 29;
  NativeBackupRequest native_backup = 30;
  ReserveMemoryRequest reserve_memory = 31;
  PruneJobRequest prune_job = 32;
  SlopPurgeJobRequest slop_purge_job = 33;
  UpdateMetadataPairRequest update_metadata_pair = 34;
  UpdateStoreDefinitions update_store_definitions = 35;
  SetOfflineStateRequest set_offline_state = 36;
  GetROStorageFileListRequest get_ro_storage_file_list = 37;
  GetROStorageCompressionCodecListRequest get_ro_compression_codec_list = 38;
  ListScheduledJobsRequest list_scheduled_jobs = 39;
  GetScheduledJobStatusRequest get_scheduled_job_status = 40;
  StopScheduledJobRequest stop_scheduled_job = 41;
  EnableScheduledJobRequest enable_scheduled_job = 42;
  GetHighAvailabilitySettingsRequest get_ha_settings = 43;
  DisableStoreVersionRequest disable_store_version = 44;
  HandleFetchFailureRequest handle_fetch_failure = 45;
  GetConfigRequest get_config = 46;
}
